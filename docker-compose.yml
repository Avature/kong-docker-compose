version: '3.1'

volumes:
    kong_data: {}
networks:
  kong-net:
    ipam:
      config:
        - subnet: 192.168.44.0/24
services:
  #######################################
  # Kong database preparation
  #######################################
  kong-migrations:
    image: "${KONG_DOCKER_TAG}"
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_HOST: ${KONG_PG_HOST:-db}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PORT: ${KONG_PG_PORT:-5432}
    links:
      - db:db
    networks:
      - kong-net
    restart: on-failure
  #######################################
  # Kong migrations runner
  #######################################
  kong-migrations-up:
    image: "${KONG_DOCKER_TAG}"
    command: kong migrations up
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_HOST: ${KONG_PG_HOST:-db}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PORT: ${KONG_PG_PORT:-5432}
    links:
      - db:db
    networks:
      - kong-net
    restart: on-failure
  #######################################
  # Kong service
  #######################################
  kong:
    image: "${KONG_DOCKER_TAG}"
    user: "root"
    volumes:
      - ./plugins/:/usr/local/custom/kong/plugins/
      - ./kong/conf/:/etc/kong/
      - /var/log/avature/kong/:/home/kong/log/
      - ./kong/conf/custom-nginx.conf:/usr/local/kong/custom-nginx.conf:ro
      - ./certs/:/home/kong/certs/
    command: /etc/kong/custom-entrypoint.sh
    depends_on:
      - db
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_HOST: ${KONG_PG_HOST:-db}
      KONG_PG_PORT: ${KONG_PG_PORT:-5432}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
    networks:
      - kong-net
    expose:
      - "8000"
      - "8001"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 99999999
    restart: on-failure
  #######################################
  # PostgreSQL database
  #######################################
  db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD}
      POSTGRES_USER: ${KONG_PG_USER}
    healthcheck:
      test: ["CMD", "pg_isready", "--username", "${KONG_PG_USER}", "--dbname", "${KONG_PG_DATABASE}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data
  #######################################
  # Konga database prepare
  #######################################
  konga-prepare:
    image: pantsel/konga:next
    command: "-c prepare -a postgres -u postgresql://${KONG_PG_USER}:${KONG_PG_PASSWORD}@db:5432/konga_db"
    networks:
      - kong-net
    restart: on-failure
    links:
      - db
    depends_on:
      - db
  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga:next
    restart: always
    networks:
      - kong-net
    volumes:
      - ./konga/kong_node.data:/run/kong_node.data:ro
      - ./konga/kong_production.data:/run/kong_production.data:ro
    environment:
      KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE: /run/kong_node.data
      KONGA_SEED_USER_DATA_SOURCE_FILE: /run/kong_production.data
      KONGA_AUTH_PROVIDER: ${KONGA_AUTH_PROVIDER}
      KONGA_LDAP_HOST: ${LDAP_HOST}
      KONGA_LDAP_BIND_DN: "cn=AppReader,dc=avature,dc=net"
      KONGA_LDAP_BIND_PASSWORD: ${LDAP_PASSWORD}
      KONGA_LDAP_USER_SEARCH_BASE: "ou=People,dc=avature,dc=net"
      KONGA_LDAP_USER_SEARCH_FILTER: "(&(objectclass=inetOrgPerson)(uid={{username}}))"
      KONGA_LDAP_USER_ATTRS: "uid,givenName,sn,mail"
      KONGA_LDAP_GROUP_SEARCH_BASE: "ou=Permission,dc=avature,dc=net"
      KONGA_LDAP_GROUP_SEARCH_FILTER: ${LDAP_GROUP_SEARCH_FILTER}
      KONGA_LDAP_GROUP_ATTRS: "cn"
      KONGA_ADMIN_GROUP_REG: ${LDAP_ADMIN_GROUP_REG}
      KONGA_LDAP_ATTR_USERNAME: "uid"
      KONGA_LDAP_ATTR_FIRSTNAME: "givenName"
      KONGA_LDAP_ATTR_LASTNAME: "sn"
      KONGA_LDAP_ATTR_EMAIL: "mail"
      DB_ADAPTER: postgres
      DB_HOST: ${KONG_PG_HOST:-db}
      DB_PORT: ${KONG_PG_PORT:-5432}
      DB_USER: ${KONG_PG_USER}
      DB_PASSWORD: ${KONG_PG_PASSWORD}
      TOKEN_SECRET: km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb
      DB_DATABASE: konga_db
      NODE_ENV: production
    depends_on:
      - db
    ports:
      - "127.0.0.1:1337:1337"
  #######################################
  # NGINX: Webserver
  #######################################
  nginx:
    image: ghcr.io/avature/kong-nginx:0.0.1
    build:
      context: ./nginx
    networks:
      - kong-net
    volumes:
      - ./certs/:/etc/ssl/certs/
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - kong
      - konga
    environment:
      BASE_HOST_DOMAIN: ${BASE_HOST_DOMAIN}
      HOST_SERVICE_SEPARATOR: "${HOST_SERVICE_SEPARATOR:--}"
      TARGET_URLS_CONF_DIR: "/etc/nginx/conf.d/server_hosts/"
  #######################################
  # Python Startup
  #######################################
  startup:
    image: ghcr.io/avature/kong-startup:0.0.2
    build:
      context: ./startup
    networks:
      - kong-net
    volumes:
      - ./startup/:/app/
      - ./.env:/certs_startup/.env
      - ./createCerts.sh:/certs_startup/createCerts.sh
      - ./certs/:/certs_startup/certs/
      - ./nginx/:/nginx_startup/
    command: /app/init.sh
    depends_on:
      - kong
    environment:
      BASE_HOST_DOMAIN: ${BASE_HOST_DOMAIN}
      HOST_SERVICE_SEPARATOR: "${HOST_SERVICE_SEPARATOR:--}"
      CREATE_SSL_CERTS: "false"
