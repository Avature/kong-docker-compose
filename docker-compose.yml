version: '3.1'

volumes:
  kong_data: {}
networks:
  kong-net: {}
services:
  #######################################
  # Kong database preparation
  #######################################
  kong-migrations:
    image: ghcr.io/avature/kong:2.1.4.06
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_HOST: ${KONG_PG_HOST:-db}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PORT: ${KONG_PG_PORT:-5432}
    links:
      - db:db
    networks:
      - kong-net
    restart: on-failure
  #######################################
  # Kong migrations runner
  #######################################
  kong-migrations-up:
    image: ghcr.io/avature/kong:2.1.4.06
    command: kong migrations up
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_HOST: ${KONG_PG_HOST:-db}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PORT: ${KONG_PG_PORT:-5432}
    links:
      - db:db
    networks:
      - kong-net
    restart: on-failure
  #######################################
  # Kong service
  #######################################
  kong:
    image: ghcr.io/avature/kong:2.1.4.06
    user: "root"
    volumes:
      - /var/log/avature/kong/:/var/log/
      - ./certs/:/home/kong/certs/
    depends_on:
      - db
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_HOST: ${KONG_PG_HOST:-db}
      KONG_PG_PORT: ${KONG_PG_PORT:-5432}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_NGINX_PROXY_CLIENT_MAX_BODY_SIZE: "100m"
      KONG_NGINX_PROXY_PROXY_SSL_PROTOCOLS: "TLSv1 TLSv1.1 TLSv1.2 TLSv1.3"
    networks:
      - kong-net
    expose:
      - "8443"
      - "8001"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 99999999
    restart: on-failure
  #######################################
  # PostgreSQL database
  #######################################
  db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD}
      POSTGRES_USER: ${KONG_PG_USER}
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--username",
          "${KONG_PG_USER}",
          "--dbname",
          "${KONG_PG_DATABASE}"
        ]
      interval: 5s
      timeout: 5s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data
  #######################################
  # Konga database prepare
  #######################################
  konga-prepare:
    image: ghcr.io/avature/konga:0.14.9.01
    command: "-c prepare -a postgres -u postgresql://${KONG_PG_USER}:${KONG_PG_PASSWORD}@db:5432/konga_db"
    networks:
      - kong-net
    restart: on-failure
    links:
      - db
    depends_on:
      - db
    environment:
      DB_HOST: ${KONG_PG_HOST:-db}
      DB_PORT: ${KONG_PG_PORT:-5432}
  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: ghcr.io/avature/konga:0.14.9.01
    restart: on-failure
    networks:
      - kong-net
    volumes:
      - ./konga/kong_node.data:/run/kong_node.data:ro
      - ./konga/kong_production.data:/run/kong_production.data:ro
    environment:
      KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE: /run/kong_node.data
      KONGA_SEED_USER_DATA_SOURCE_FILE: /run/kong_production.data
      KONGA_AUTH_PROVIDER: ${KONGA_AUTH_PROVIDER}
      KONGA_LDAP_HOST: ${LDAP_HOST}
      KONGA_LDAP_BIND_DN: "cn=AppReader,dc=avature,dc=net"
      KONGA_LDAP_BIND_PASSWORD: ${LDAP_PASSWORD}
      KONGA_LDAP_USER_SEARCH_BASE: "ou=People,dc=avature,dc=net"
      KONGA_LDAP_USER_SEARCH_FILTER: "(&(objectclass=inetOrgPerson)(uid={{username}}))"
      KONGA_LDAP_USER_ATTRS: "uid,givenName,sn,mail"
      KONGA_LDAP_GROUP_SEARCH_BASE: "ou=Permission,dc=avature,dc=net"
      KONGA_LDAP_GROUP_SEARCH_FILTER: ${LDAP_GROUP_SEARCH_FILTER}
      KONGA_LDAP_GROUP_ATTRS: "cn"
      KONGA_ADMIN_GROUP_REG: ${LDAP_ADMIN_GROUP_REG}
      KONGA_LDAP_ATTR_USERNAME: "uid"
      KONGA_LDAP_ATTR_FIRSTNAME: "givenName"
      KONGA_LDAP_ATTR_LASTNAME: "sn"
      KONGA_LDAP_ATTR_EMAIL: "mail"
      DB_ADAPTER: postgres
      DB_HOST: ${KONG_PG_HOST:-db}
      DB_PORT: ${KONG_PG_PORT:-5432}
      DB_USER: ${KONG_PG_USER}
      DB_PASSWORD: ${KONG_PG_PASSWORD}
      TOKEN_SECRET: km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb
      DB_DATABASE: konga_db
      NODE_ENV: production
    depends_on:
      - db
    ports:
      - "127.0.0.1:1337:1337"
  #######################################
  # NGINX: Webserver
  #######################################
  nginx:
    image: ghcr.io/avature/kong-nginx:0.0.8
    networks:
      - kong-net
    volumes:
      - ./.env:/etc/ssl/.env:ro
      - ./certs/:/etc/ssl/certs/
      - ./nginx/sslCertificates.conf:/etc/nginx/conf.d/sslCertificates.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - kong
      - konga
      - db
    links:
      - db
    environment:
      CREATE_SSL_CERTS: "false"
      BASE_HOST_DOMAIN: ${BASE_HOST_DOMAIN}
      HOST_SERVICE_SEPARATOR: "${HOST_SERVICE_SEPARATOR:--}"
      TARGET_URLS_CONF_DIR: "${TARGET_URLS_CONF_DIR:-/etc/nginx/conf.d/server_hosts/}"
  #######################################
  # Python Startup
  #######################################
  startup:
    image: ghcr.io/avature/kong-startup:0.0.5
    networks:
      - kong-net
    environment:
      BASE_HOST_DOMAIN: ${BASE_HOST_DOMAIN}
      HOST_SERVICE_SEPARATOR: "${HOST_SERVICE_SEPARATOR:--}"
      RETRY_ON_ERROR: 1
